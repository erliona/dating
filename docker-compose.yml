# Microservices Docker Compose configuration
#
# This configuration deploys the dating application as microservices.
# Each service can be scaled and deployed independently.

services:
  # Database (shared in Phase 2, will be split in Phase 3)
  # Note: External port exposure is disabled by default for production security.
  # Microservices connect internally via Docker network - no external port needed.
  # For local development with external tools: uncomment ports and set POSTGRES_EXTERNAL_PORT
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-dating}
      POSTGRES_USER: ${POSTGRES_USER:-dating}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-dating}
    # Uncomment for local development if you need external database access:
    # ports:
    #   - "${POSTGRES_EXTERNAL_PORT:-5433}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-dating}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Auth Service - JWT and session management
  auth-service:
    build:
      context: .
      dockerfile: services/auth/Dockerfile
    environment:
      JWT_SECRET: ${JWT_SECRET}
      AUTH_SERVICE_HOST: 0.0.0.0
      AUTH_SERVICE_PORT: 8081
      BOT_TOKEN: ${BOT_TOKEN}
    ports:
      - "8081:8081"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Profile Service - User profiles and settings
  profile-service:
    build:
      context: .
      dockerfile: services/profile/Dockerfile
    depends_on:
      db:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-dating}:${POSTGRES_PASSWORD:-dating}@db:5432/${POSTGRES_DB:-dating}
      PROFILE_SERVICE_HOST: 0.0.0.0
      PROFILE_SERVICE_PORT: 8082
    ports:
      - "8082:8082"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Discovery Service - Matching and recommendations
  discovery-service:
    build:
      context: .
      dockerfile: services/discovery/Dockerfile
    depends_on:
      db:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-dating}:${POSTGRES_PASSWORD:-dating}@db:5432/${POSTGRES_DB:-dating}
      DISCOVERY_SERVICE_HOST: 0.0.0.0
      DISCOVERY_SERVICE_PORT: 8083
    ports:
      - "8083:8083"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Media Service - Photo upload and processing
  media-service:
    build:
      context: .
      dockerfile: services/media/Dockerfile
    depends_on:
      db:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-dating}:${POSTGRES_PASSWORD:-dating}@db:5432/${POSTGRES_DB:-dating}
      MEDIA_SERVICE_HOST: 0.0.0.0
      MEDIA_SERVICE_PORT: 8084
      PHOTO_STORAGE_PATH: /app/photos
      NSFW_THRESHOLD: ${NSFW_THRESHOLD:-0.7}
    ports:
      - "8084:8084"
    volumes:
      - media_storage:/app/photos
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Chat Service - Real-time messaging (WebSocket)
  chat-service:
    build:
      context: .
      dockerfile: services/chat/Dockerfile
    depends_on:
      db:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-dating}:${POSTGRES_PASSWORD:-dating}@db:5432/${POSTGRES_DB:-dating}
      CHAT_SERVICE_HOST: 0.0.0.0
      CHAT_SERVICE_PORT: 8085
    ports:
      - "8085:8085"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Admin Service - Admin panel for managing the system
  admin-service:
    build:
      context: .
      dockerfile: services/admin/Dockerfile
    depends_on:
      db:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-dating}:${POSTGRES_PASSWORD:-dating}@db:5432/${POSTGRES_DB:-dating}
      JWT_SECRET: ${JWT_SECRET}
      ADMIN_SERVICE_HOST: 0.0.0.0
      ADMIN_SERVICE_PORT: 8086
    ports:
      - "8086:8086"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # API Gateway - Routes requests to microservices
  api-gateway:
    build:
      context: .
      dockerfile: gateway/Dockerfile
    depends_on:
      - auth-service
      - profile-service
      - discovery-service
      - media-service
      - chat-service
      - admin-service
    environment:
      GATEWAY_HOST: 0.0.0.0
      GATEWAY_PORT: 8080
      AUTH_SERVICE_URL: http://auth-service:8081
      PROFILE_SERVICE_URL: http://profile-service:8082
      DISCOVERY_SERVICE_URL: http://discovery-service:8083
      MEDIA_SERVICE_URL: http://media-service:8084
      CHAT_SERVICE_URL: http://chat-service:8085
      ADMIN_SERVICE_URL: http://admin-service:8086
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Telegram Bot Adapter - Integrates with Telegram
  telegram-bot:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - api-gateway
    environment:
      BOT_TOKEN: ${BOT_TOKEN}
      API_GATEWAY_URL: http://api-gateway:8080
      WEBAPP_URL: ${WEBAPP_URL}
    restart: unless-stopped

  # WebApp (static files)
  # Note: This service is optional. Only enable if you want to serve static web files.
  # If port 80 is already in use, you can disable this service or change the port.
  webapp:
    image: nginx:alpine
    volumes:
      - ./webapp:/usr/share/nginx/html:ro
    ports:
      - "${WEBAPP_PORT:-80}:80"
    restart: unless-stopped
    profiles:
      - webapp

  # ==================== MONITORING STACK ====================
  
  # Prometheus - Metrics collection and storage
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/alerts.yml:/etc/prometheus/alerts.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - monitoring

  # Grafana - Visualization and dashboards
  grafana:
    image: grafana/grafana:latest
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_INSTALL_PLUGINS=
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
      - loki
    restart: unless-stopped
    networks:
      - monitoring

  # Loki - Log aggregation
  loki:
    image: grafana/loki:latest
    volumes:
      - ./monitoring/loki/loki-config.yml:/etc/loki/loki-config.yml
      - loki_data:/loki
    command: -config.file=/etc/loki/loki-config.yml
    ports:
      - "3100:3100"
    restart: unless-stopped
    networks:
      - monitoring

  # Promtail - Log shipper
  promtail:
    image: grafana/promtail:latest
    volumes:
      - ./monitoring/promtail/promtail-config.yml:/etc/promtail/promtail-config.yml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/log:/var/log:ro
    command: -config.file=/etc/promtail/promtail-config.yml
    depends_on:
      - loki
    restart: unless-stopped
    networks:
      - monitoring

  # cAdvisor - Container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - "8090:8080"  # Changed from 8081 to avoid conflict with auth-service
    privileged: true
    devices:
      - /dev/kmsg
    restart: unless-stopped
    networks:
      - monitoring

  # Node Exporter - System metrics
  node-exporter:
    image: prom/node-exporter:latest
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    ports:
      - "9100:9100"
    restart: unless-stopped
    networks:
      - monitoring

  # Postgres Exporter - Database metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER:-dating}:${POSTGRES_PASSWORD:-dating}@db:5432/${POSTGRES_DB:-dating}?sslmode=disable"
    ports:
      - "9187:9187"
    depends_on:
      - db
    restart: unless-stopped
    networks:
      - monitoring
      - default

networks:
  monitoring:
    driver: bridge

volumes:
  postgres_data:
  media_storage:
  prometheus_data:
  grafana_data:
  loki_data:
