openapi: 3.0.0
info:
  title: Chat API
  version: 1.0.0
  description: Chat API protocol specification for the dating platform

servers:
  - url: https://api.dating.serge.cc
    description: Production server
  - url: http://localhost:8080
    description: Development server

paths:
  /chat/ws:
    get:
      summary: WebSocket connection for real-time chat
      description: Establishes WebSocket connection for real-time messaging
      parameters:
        - name: conversation_id
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Optional conversation context
      responses:
        '101':
          description: WebSocket connection established
        '401':
          description: Authentication required
      security:
        - bearerAuth: []

  /chat/conversations:
    get:
      summary: Get user conversations
      description: Retrieve paginated list of user conversations
      parameters:
        - name: user_id
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            maximum: 50
        - name: cursor
          in: query
          schema:
            type: string
          description: Pagination cursor
        - name: with_unread_only
          in: query
          schema:
            type: boolean
            default: false
        - name: sort
          in: query
          schema:
            type: string
            default: last_message_at.desc
            enum: [last_message_at.desc, last_message_at.asc]
      responses:
        '200':
          description: List of conversations
          content:
            application/json:
              schema:
                type: object
                properties:
                  conversations:
                    type: array
                    items:
                      $ref: '#/components/schemas/Conversation'
                  cursor:
                    type: string
                  has_more:
                    type: boolean
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /chat/conversations/{conversation_id}/messages:
    get:
      summary: Get messages for a conversation
      description: Retrieve paginated messages for a conversation
      parameters:
        - name: conversation_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: before_id
          in: query
          schema:
            type: string
            format: uuid
          description: Get messages before this ID
        - name: after_id
          in: query
          schema:
            type: string
            format: uuid
          description: Get messages after this ID
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
            maximum: 50
      responses:
        '200':
          description: List of messages
          headers:
            Link:
              description: Pagination links
              schema:
                type: string
            X-Has-More:
              description: Whether more messages are available
              schema:
                type: boolean
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    items:
                      $ref: '#/components/schemas/Message'
                  has_more:
                    type: boolean
        '404':
          $ref: '#/components/responses/NotFound'

    post:
      summary: Send a new message
      description: Send a message to a conversation with idempotency support
      parameters:
        - name: conversation_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: Idempotency-Key
          in: header
          required: true
          schema:
            type: string
            format: uuid
          description: Idempotency key for duplicate prevention
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  maxLength: 4000
                  description: Message content
                content_type:
                  type: string
                  enum: [text, image, file]
                  default: text
                  description: Type of message content
              required: [content]
      responses:
        '201':
          description: Message created
          headers:
            Location:
              description: URL of the created message
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '200':
          description: Idempotent replay
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '422':
          $ref: '#/components/responses/ValidationError'
      security:
        - bearerAuth: []

  /chat/conversations/{conversation_id}/read-state:
    put:
      summary: Set read state up to a message
      description: Mark messages as read up to a specific message ID
      parameters:
        - name: conversation_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                up_to_message_id:
                  type: string
                  format: uuid
                  description: Message ID to read up to (inclusive)
              required: [up_to_message_id]
      responses:
        '204':
          description: Read state updated
        '404':
          description: Conversation or message not found
        '422':
          description: Message doesn't belong to conversation
      security:
        - bearerAuth: []

  /chat/blocks:
    post:
      summary: Block a user
      description: Block a user from all conversations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                target_user_id:
                  type: string
                  format: uuid
                  description: User ID to block
              required: [target_user_id]
      responses:
        '201':
          description: User blocked
          headers:
            Location:
              description: URL of the block relationship
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Block'
        '400':
          $ref: '#/components/responses/BadRequest'
      security:
        - bearerAuth: []

  /chat/blocks/{target_user_id}:
    delete:
      summary: Unblock a user
      description: Remove block from a user
      parameters:
        - name: target_user_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: User unblocked
        '404':
          description: Block not found
      security:
        - bearerAuth: []

  /chat/reports:
    post:
      summary: Create a report
      description: Report a conversation or message for moderation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                conversation_id:
                  type: string
                  format: uuid
                  description: Conversation to report
                message_id:
                  type: string
                  format: uuid
                  description: Specific message to report (optional)
                reason:
                  type: string
                  enum: [spam, abuse, harassment, inappropriate, other]
                  description: Reason for reporting
                comment:
                  type: string
                  maxLength: 500
                  description: Additional details (optional)
              required: [conversation_id, reason]
      responses:
        '202':
          description: Report submitted for moderation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        '400':
          $ref: '#/components/responses/BadRequest'
        '429':
          $ref: '#/components/responses/RateLimited'
      security:
        - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Message:
      type: object
      properties:
        id:
          type: string
          format: uuid
        conversation_id:
          type: string
          format: uuid
        sender_id:
          type: string
          format: uuid
        content:
          type: string
        content_type:
          type: string
          enum: [text, image, file]
        created_at:
          type: string
          format: date-time
        read_at:
          type: string
          format: date-time
          nullable: true
      required: [id, conversation_id, sender_id, content, content_type, created_at]

    Conversation:
      type: object
      properties:
        id:
          type: string
          format: uuid
        participants:
          type: array
          items:
            type: string
            format: uuid
        last_message:
          $ref: '#/components/schemas/Message'
        unread_count:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required: [id, participants, created_at, updated_at]

    Block:
      type: object
      properties:
        blocker_id:
          type: string
          format: uuid
        target_user_id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
      required: [blocker_id, target_user_id, created_at]

    Report:
      type: object
      properties:
        id:
          type: string
          format: uuid
        reporter_id:
          type: string
          format: uuid
        conversation_id:
          type: string
          format: uuid
        message_id:
          type: string
          format: uuid
          nullable: true
        reason:
          type: string
        comment:
          type: string
          nullable: true
        status:
          type: string
          enum: [pending, reviewed, actioned]
        created_at:
          type: string
          format: date-time
      required: [id, reporter_id, conversation_id, reason, status, created_at]

    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
            details:
              type: object
            request_id:
              type: string
          required: [code, message]

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    RateLimited:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
