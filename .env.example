# Dating Bot Environment Configuration
# Copy this file to .env and update the values before running the application.

# ============================================================================
# BOT CONFIGURATION (Required)
# ============================================================================

# Telegram Bot Token (required)
# Get this from @BotFather on Telegram
# Format: <numeric_id>:<alphanumeric_hash>
# Example: 123456789:ABCdefGHIjklMNOpqrsTUVwxyz-1234567
BOT_TOKEN=your-telegram-bot-token-here

# Webapp URL (required for production)
# Public HTTPS URL where the Telegram Mini App is hosted
# Must use HTTPS protocol for production deployments
# For local development, use https://localhost
WEBAPP_URL=https://your-domain.com

# ============================================================================
# DATABASE CONFIGURATION
# ============================================================================

# PostgreSQL Connection for Docker Compose
# These are used by the postgres container and to build BOT_DATABASE_URL
POSTGRES_DB=dating
POSTGRES_USER=dating

# IMPORTANT: Use only alphanumeric characters (A-Z, a-z, 0-9) for the password
# Special characters require URL encoding and may cause authentication issues
# If you change the password after initial deployment, you must reset the database:
#   docker compose down -v && docker compose up
POSTGRES_PASSWORD=dating
POSTGRES_PORT=5432

# Direct Database URL (used when running bot outside Docker Compose)
# Format: postgresql+asyncpg://user:password@host:port/database
# If not set, it will be automatically constructed from POSTGRES_* variables
# If the password contains special characters, they must be URL-encoded:
#   from urllib.parse import quote_plus
#   password_encoded = quote_plus('my@password!')
# BOT_DATABASE_URL=postgresql+asyncpg://dating:dating@localhost:5432/dating

# ============================================================================
# WEB APPLICATION CONFIGURATION
# ============================================================================

# Domain for the webapp (required for production HTTPS)
# This should be the public domain name where your app is hosted
# Used by Traefik to generate SSL certificates
DOMAIN=your-domain.com

# ACME (Let's Encrypt) email for certificate notifications
# Required for production HTTPS certificate generation
ACME_EMAIL=admin@your-domain.com

# ACME CA Server (optional)
# For testing, use Let's Encrypt staging server to avoid rate limits:
# ACME_CA_SERVER=https://acme-staging-v02.api.letsencrypt.org/directory
# For production, leave empty or use:
# ACME_CA_SERVER=https://acme-v02.api.letsencrypt.org/directory

# HTTP and HTTPS ports (optional)
# Only change if you need to use non-standard ports
HTTP_PORT=80
HTTPS_PORT=443

# Port for the nginx webapp container (deprecated, now handled by Traefik)
# Only used for local development without Traefik
# WEBAPP_PORT=8080

# ============================================================================
# DEPLOYMENT & OPERATIONS
# ============================================================================

# Database migrations
# Set to 'false' to skip automatic migrations on container startup
# RUN_DB_MIGRATIONS=true

# Debug logging
# Set to 'true', '1', or 'yes' to enable DEBUG level logging
# DEBUG=false

