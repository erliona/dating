# Dating Bot Environment Configuration
# Copy this file to .env and update the values before running the application.

# ============================================================================
# BOT CONFIGURATION (Required)
# ============================================================================

# Telegram Bot Token (required)
# Get this from @BotFather on Telegram
# Format: <numeric_id>:<alphanumeric_hash>
# Example: 123456789:ABCdefGHIjklMNOpqrsTUVwxyz-1234567
BOT_TOKEN=your-telegram-bot-token-here

# JWT Secret Key (required for production)
# Generate a strong random string for signing JWT tokens
# Example: python -c "import secrets; print(secrets.token_urlsafe(32))"
# For development, a temporary secret will be generated if not set
JWT_SECRET=your-jwt-secret-key-here

# Webapp URL (required for production)
# Public HTTPS URL where the Telegram Mini App is hosted
# Must use HTTPS protocol for production deployments
# For local development, use https://localhost
WEBAPP_URL=https://your-domain.com

# API Gateway URL (required)
# The bot uses thin client architecture and communicates through API Gateway
# In Docker Compose: http://api-gateway:8080
# For external deployment: https://your-api-domain.com
API_GATEWAY_URL=http://api-gateway:8080

# ============================================================================
# DATABASE CONFIGURATION
# ============================================================================

# PostgreSQL Connection for Docker Compose
# These are used by the postgres container and microservices
POSTGRES_DB=dating
POSTGRES_USER=dating

# IMPORTANT: Use only alphanumeric characters (A-Z, a-z, 0-9) for the password
# Special characters require URL encoding and may cause authentication issues
# WARNING: For production, use a strong password and keep it static.
# Changing this password after initial deployment will break database connections.
# If you must change it, you need to reset the database:
#   docker compose down -v && docker compose up
# For production deployments, set this in GitHub Secrets as POSTGRES_PASSWORD
POSTGRES_PASSWORD=dating

# External PostgreSQL Port (for local development only)
# Default: Not exposed (microservices connect internally via Docker network)
# For production deployments, external port exposure is disabled for security.
# Uncomment the ports section in docker-compose.yml and set this variable if you need
# external database access for development (e.g., with pgAdmin, DBeaver, etc.)
# Use a non-standard port (e.g., 5433) if port 5432 is already in use on your system.
# POSTGRES_EXTERNAL_PORT=5433

# Direct Database URL (optional - NOT needed for bot)
# NOTE: The bot now uses thin client architecture and communicates via API Gateway.
# It does NOT need direct database access. This configuration is only for microservices.
# Format: postgresql+asyncpg://user:password@host:port/database
#
# Microservices will automatically construct the URL from POSTGRES_USER,
# POSTGRES_PASSWORD, and POSTGRES_DB (with optional POSTGRES_HOST and POSTGRES_PORT).
#
# If the password contains special characters, they must be URL-encoded:
#   from urllib.parse import quote_plus
#   password_encoded = quote_plus('my@password!')
# DATABASE_URL=postgresql+asyncpg://dating:dating@localhost:5432/dating

# ============================================================================
# SERVICE PORTS CONFIGURATION
# ============================================================================

# Application Services Ports (8080-8086)
# These ports can be customized for different deployment environments
# Default values are provided for standard deployment

# API Gateway Port
# Default: 8080 (main entry point for all requests)
GATEWAY_PORT=8080

# Auth Service Port
# Default: 8081 (JWT authentication and session management)
AUTH_SERVICE_PORT=8081

# Profile Service Port
# Default: 8082 (user profile management)
PROFILE_SERVICE_PORT=8082

# Discovery Service Port
# Default: 8083 (matching algorithms and recommendations)
DISCOVERY_SERVICE_PORT=8083

# Media Service Port
# Default: 8084 (photo upload and processing)
MEDIA_SERVICE_PORT=8084

# Chat Service Port
# Default: 8085 (real-time messaging via WebSocket)
CHAT_SERVICE_PORT=8085

# Admin Service Port
# Default: 8086 (admin panel for system management)
ADMIN_SERVICE_PORT=8086

# Service URLs (for gateway routing)
# These should match the internal service names and ports
# Only customize if you need non-standard configurations
# AUTH_SERVICE_URL=http://auth-service:8081
# PROFILE_SERVICE_URL=http://profile-service:8082
# DISCOVERY_SERVICE_URL=http://discovery-service:8083
# MEDIA_SERVICE_URL=http://media-service:8084
# CHAT_SERVICE_URL=http://chat-service:8085
# ADMIN_SERVICE_URL=http://admin-service:8086

# Monitoring Services Ports
# Prometheus Port (metrics collection)
# Default: 9090
PROMETHEUS_PORT=9090

# Grafana Port (visualization dashboards)
# Default: 3000
GRAFANA_PORT=3000

# Loki Port (log aggregation)
# Default: 3100
LOKI_PORT=3100

# cAdvisor Port (container metrics)
# Default: 8090 (changed from 8081 to avoid conflict)
CADVISOR_PORT=8090

# Traefik Dashboard Port (reverse proxy dashboard)
# Default: 8091 (changed from 8090 to avoid conflict with cAdvisor)
TRAEFIK_DASHBOARD_PORT=8091

# Node Exporter Port (system metrics)
# Default: 9100
NODE_EXPORTER_PORT=9100

# Postgres Exporter Port (database metrics)
# Default: 9187
POSTGRES_EXPORTER_PORT=9187

# ============================================================================
# WEB APPLICATION CONFIGURATION
# ============================================================================

# Domain for the webapp (required for production HTTPS)
# This should be the public domain name where your app is hosted
# Used by Traefik to generate SSL certificates
DOMAIN=your-domain.com

# ACME (Let's Encrypt) email for certificate notifications
# Required for production HTTPS certificate generation
ACME_EMAIL=admin@your-domain.com

# ACME CA Server (optional)
# For testing, use Let's Encrypt staging server to avoid rate limits:
# ACME_CA_SERVER=https://acme-staging-v02.api.letsencrypt.org/directory
# For production, leave empty or use:
# ACME_CA_SERVER=https://acme-v02.api.letsencrypt.org/directory

# HTTP and HTTPS ports (optional)
# Only change if you need to use non-standard ports
HTTP_PORT=80
HTTPS_PORT=443

# Port for the nginx webapp container
# Default: 80 (standard HTTP port)
# Change this if port 80 is already in use on your server
# Note: The webapp service is optional and disabled by default.
# To enable: docker compose --profile webapp up -d
WEBAPP_PORT=80

# Grafana Admin Password
# Default: admin (change for production)
GRAFANA_ADMIN_PASSWORD=admin

# ============================================================================
# DEPLOYMENT & OPERATIONS
# ============================================================================

# Database migrations
# Set to 'false' to skip automatic migrations on container startup
# RUN_DB_MIGRATIONS=true

# Debug logging
# Set to 'true', '1', or 'yes' to enable DEBUG level logging
# DEBUG=false


# ============================================================================
# PHOTO STORAGE CONFIGURATION
# ============================================================================

# Path where photos are stored on the server (inside container)
PHOTO_STORAGE_PATH=/app/photos

# Optional: CDN URL for serving photos (leave empty for local serving)
# When set, photos will be served from CDN instead of local API server
# Example: PHOTO_CDN_URL=https://cdn.example.com
PHOTO_CDN_URL=

# NSFW Detection Configuration
# Threshold for NSFW detection (0.0-1.0, higher = stricter)
# 0.7 = balanced (recommended)
# 0.5 = permissive
# 0.9 = very strict
NSFW_THRESHOLD=0.7
