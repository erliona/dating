# Promtail configuration - Modern v3.x compatible schema
# Enhanced log collection with better parsing and labeling

server:
  http_listen_port: 9080
  grpc_listen_port: 0
  log_level: info

positions:
  filename: /tmp/positions.yaml

clients:
  - url: http://loki:3100/loki/api/v1/push
    # Batching configuration for better performance
    batchwait: 1s
    batchsize: 1048576  # 1MB
    # Retry configuration
    backoff_config:
      min_period: 500ms
      max_period: 5m
      max_retries: 10
    timeout: 10s

scrape_configs:
  # Scrape Docker container logs using Docker service discovery
  - job_name: docker
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
        filters:
          - name: label
            values: ["com.docker.compose.project=dating"]
    
    relabel_configs:
      # Set container name as label
      - source_labels: ['__meta_docker_container_name']
        regex: '/(.*)'
        target_label: 'container_name'
      
      # Set container ID (short)
      - source_labels: ['__meta_docker_container_id']
        regex: '(.{12}).*'
        target_label: 'container_id'
        replacement: '$1'
      
      # Set full container ID for path
      - source_labels: ['__meta_docker_container_id']
        target_label: '__path__'
        replacement: '/var/lib/docker/containers/$1/*-json.log'
      
      # Extract service name from container name
      - source_labels: ['__meta_docker_container_name']
        regex: '/dating[-_]([^-_]+).*'
        target_label: 'service'
        replacement: '$1'
      
      # Add compose project label
      - source_labels: ['__meta_docker_container_label_com_docker_compose_project']
        target_label: 'compose_project'
      
      # Add compose service label
      - source_labels: ['__meta_docker_container_label_com_docker_compose_service']
        target_label: 'compose_service'
      
      # Add environment label if present
      - source_labels: ['__meta_docker_container_label_environment']
        target_label: 'environment'
        replacement: '${1}'
    
    pipeline_stages:
      # Parse Docker JSON logs
      - json:
          expressions:
            output: log
            stream: stream
            time: time
      
      # Extract timestamp
      - timestamp:
          source: time
          format: RFC3339Nano
      
      # Try to parse JSON logs from applications
      - json:
          expressions:
            level: level
            message: message
            logger: logger
            timestamp: timestamp
          source: output
      
      # Extract log level if present
      - labels:
          level:
      
      # Add log level as label if detected in message
      - regex:
          expression: '(?i)(?P<detected_level>DEBUG|INFO|WARN|WARNING|ERROR|CRITICAL|FATAL)'
          source: output
      
      - labels:
          detected_level:
      
      # Set the final log line
      - output:
          source: output
      
      # Drop empty lines
      - match:
          selector: '{job="docker"}'
          stages:
            - drop:
                expression: '^$'

  # Scrape system logs
  - job_name: system
    static_configs:
      - targets:
          - localhost
        labels:
          job: syslog
          host: localhost
          __path__: /var/log/syslog
    
    pipeline_stages:
      # Parse syslog format
      - regex:
          expression: '^(?P<timestamp>\w+\s+\d+\s+\d+:\d+:\d+)\s+(?P<hostname>\S+)\s+(?P<app>\S+?)(\[(?P<pid>\d+)\])?:\s+(?P<message>.*)$'
      
      # Extract timestamp
      - timestamp:
          source: timestamp
          format: 'Jan 02 15:04:05'
      
      # Add labels
      - labels:
          app:
          hostname:
      
      # Set output
      - output:
          source: message
