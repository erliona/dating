name: Tests

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

concurrency:
  group: test-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: dating_test
          POSTGRES_USER: dating
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Wait for PostgreSQL
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U dating > /dev/null 2>&1; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "Attempt $i/30 - waiting 2s..."
            sleep 2
          done
          pg_isready -h localhost -p 5432 -U dating || (echo "PostgreSQL failed to become ready" && exit 1)

      - name: Apply database migrations
        env:
          BOT_DATABASE_URL: postgresql+asyncpg://dating:test_password@localhost:5432/dating_test
        run: |
          echo "Applying database migrations..."
          alembic upgrade head
          echo "Migrations applied successfully"

      - name: Run tests
        env:
          DATABASE_URL: postgresql+asyncpg://dating:test_password@localhost:5432/dating_test
          BOT_DATABASE_URL: postgresql+asyncpg://dating:test_password@localhost:5432/dating_test
          BOT_TOKEN: test:token
          JWT_SECRET: test-secret-key-for-testing-32chars
          API_GATEWAY_URL: http://localhost:8080
        run: |
          python -m pytest tests/ -v --tb=short --cov=. --cov-report=xml --cov-report=term

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Test summary
        if: always()
        run: |
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Tests completed" >> $GITHUB_STEP_SUMMARY
