name: Deploy

on:
  workflow_dispatch:
  push:
    branches: [ main ]

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 1) Поднимаем ssh-agent и добавляем приватный ключ из секрета
      - name: Use SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{ secrets.DEPLOY_SSH_KEY }}

      # 2) Добавляем host key сервера (чтобы не было интерактива по known_hosts)
      - name: Add server to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -4 -t ed25519 ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          # отладка: покажем запись (без секрета)
          tail -n 1 ~/.ssh/known_hosts

      # 3) Готовим директорию на сервере
      - name: Prepare remote dir
        run: |
          ssh -o StrictHostKeyChecking=yes ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} \
            "sudo mkdir -p '${{ secrets.DEPLOY_PATH }}' && sudo chown -R \$USER:\$USER '${{ secrets.DEPLOY_PATH }}'"

      # 4) Копируем проект на сервер (rsync быстрее и надёжнее scp)
      - name: Upload project
        run: |
          rsync -az --delete \
            --exclude '.git' \
            --exclude '.github' \
            ./ ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:${{ secrets.DEPLOY_PATH }}/

      # 5) Пишем .env и запускаем docker compose
      - name: Write .env and compose up
        run: |
          ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} <<'EOSSH'
          set -euo pipefail
          cd '${{ secrets.DEPLOY_PATH }}'

          # пишем .env из секрета
          cat > .env <<'EOF'
          ${{ secrets.ENV_FILE }}
          EOF
          chmod 600 .env

          # деплой
          sudo docker compose up -d --build
          sudo docker compose ps
          EOSSH
