name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Static Code Analysis
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        
    - name: Run Black (code formatting)
      run: black --check --diff .
      
    - name: Run isort (import sorting)
      run: isort --check-only --diff .
      
    - name: Run Ruff (linting)
      run: ruff check .
      
    - name: Run MyPy (type checking)
      run: mypy core/ services/ gateway/ --ignore-missing-imports
      
    - name: Run Bandit (security)
      run: bandit -r . -f json -o bandit-report.json || true
      
    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json

  # Unit Tests
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Set up test environment
      run: |
        export DATABASE_URL="postgresql://test_user:test_password@localhost:5432/test_db"
        export JWT_SECRET="test_jwt_secret_for_ci"
        export BOT_TOKEN="test_bot_token"
        
    - name: Run database migrations
      run: |
        export DATABASE_URL="postgresql://test_user:test_password@localhost:5432/test_db"
        alembic upgrade head
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        
    - name: Run tests with coverage
      run: |
        export DATABASE_URL="postgresql://test_user:test_password@localhost:5432/test_db"
        export JWT_SECRET="test_jwt_secret_for_ci"
        export BOT_TOKEN="test_bot_token"
        pytest --cov=core --cov=services --cov=gateway --cov-report=xml --cov-report=html
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        JWT_SECRET: test_jwt_secret_for_ci
        BOT_TOKEN: test_bot_token
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: htmlcov/
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Frontend Tests
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: webapp/package-lock.json
        
    - name: Install frontend dependencies
      working-directory: webapp
      run: npm ci
      
    - name: Run frontend tests
      working-directory: webapp
      run: npm run test
      
    - name: Build frontend
      working-directory: webapp
      run: npm run build
      
    - name: Analyze bundle size
      working-directory: webapp
      run: npm run build:analyze

  # Docker Build Test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    strategy:
      matrix:
        service: [
          auth-service,
          profile-service, 
          discovery-service,
          chat-service,
          media-service,
          admin-service,
          notification-service,
          data-service,
          api-gateway,
          telegram-bot
        ]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        if [ "${{ matrix.service }}" = "api-gateway" ]; then
          docker build -t ${{ matrix.service }} ./gateway
        elif [ "${{ matrix.service }}" = "telegram-bot" ]; then
          docker build -t ${{ matrix.service }} .
        else
          docker build -t ${{ matrix.service }} ./services/${{ matrix.service }}
        fi
        
    - name: Test Docker image
      run: |
        docker run --rm ${{ matrix.service }} python -c "print('Service started successfully')"

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Integration Tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test, docker-build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Compose
      run: |
        docker compose config
        
    - name: Start services
      run: |
        docker compose up -d db redis
        sleep 10
        
    - name: Run integration tests
      run: |
        export DATABASE_URL="postgresql://dating:dating@localhost:5432/dating"
        export JWT_SECRET="test_jwt_secret"
        export BOT_TOKEN="test_bot_token"
        pytest tests/integration/ -v
        
    - name: Cleanup
      if: always()
      run: |
        docker compose down

  # Performance Tests
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        
    - name: Run performance tests
      run: |
        python scripts/test_query_performance.py
        
    - name: Load test API Gateway
      run: |
        # Install hey for load testing
        go install github.com/rakyll/hey@latest
        # Start services
        docker compose up -d
        sleep 30
        # Run load test
        hey -n 1000 -c 10 http://localhost:8080/health
        # Cleanup
        docker compose down

  # Deployment Test
  deployment-test:
    name: Deployment Test
    runs-on: ubuntu-latest
    needs: [performance-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Test deployment script
      run: |
        chmod +x scripts/deploy.sh
        # Test dry run
        ./scripts/deploy.sh --dry-run
        
    - name: Validate configuration
      run: |
        docker compose config
        docker compose config --services
