name: CI

on:
  push:
    branches: ["main", "master"]
  pull_request:
    branches: ["main", "master"]

permissions:
  contents: read

jobs:
  test-and-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Validate environment variables template
        run: |
          # Check that .env.example exists and contains required variables
          if [ ! -f .env.example ]; then
            echo "Error: .env.example not found"
            exit 1
          fi
          
          required_vars="BOT_TOKEN POSTGRES_DB POSTGRES_USER POSTGRES_PASSWORD WEBAPP_URL DOMAIN ACME_EMAIL"
          for var in $required_vars; do
            if ! grep -q "^[# ]*$var" .env.example; then
              echo "Error: $var not found in .env.example"
              exit 1
            fi
          done
          echo "✓ .env.example validation passed"

      - name: Run unit tests
        run: |
          # Run pytest with coverage
          python -m pytest tests/ -v --tb=short
          echo "✓ Unit tests passed"

      - name: Run linting checks
        run: |
          # Check for common Python issues
          python -m py_compile bot/*.py
          echo "✓ Python syntax check passed"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: local/dating-bot-ci:latest
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          # Verify the image was built successfully
          docker images | grep dating-bot-ci
          
          # Test that the image contains required files
          # Use --entrypoint to bypass the migration step during testing
          docker run --rm --entrypoint ls local/dating-bot-ci:latest -la /app/bot
          docker run --rm --entrypoint ls local/dating-bot-ci:latest -la /app/migrations
          docker run --rm --entrypoint ls local/dating-bot-ci:latest -la /app/webapp
          
          echo "✓ Docker image test passed"

      - name: Security scan (dependencies)
        run: |
          # Check for known security vulnerabilities in dependencies
          pip install pip-audit
          pip-audit -r requirements.txt -r requirements-dev.txt --desc || echo "⚠ Security warnings found (non-blocking)"
          echo "✓ Security scan completed"

      - name: Test Docker Compose configuration
        run: |
          # Create minimal .env for testing
          cat > .env.test <<EOF
          BOT_TOKEN=123456789:ABCdefGHIjklMNOpqrsTUVwxyz-TestToken
          POSTGRES_DB=dating_test
          POSTGRES_USER=dating_test
          POSTGRES_PASSWORD=TestPassword123
          WEBAPP_URL=https://localhost
          DOMAIN=localhost
          PHOTO_STORAGE_PATH=/app/photos
          PHOTO_CDN_URL=
          API_HOST=0.0.0.0
          API_PORT=8080
          EOF
          
          # Validate docker-compose.yml syntax
          docker compose -f docker-compose.yml config > /dev/null
          echo "✓ Docker Compose configuration is valid"

      - name: Start monitoring stack
        run: |
          # Copy test environment
          cp .env.test .env
          
          # Start monitoring services
          echo "🚀 Starting monitoring stack..."
          docker compose --profile monitoring up -d loki promtail grafana prometheus
          
          # Wait for services to be ready
          echo "⏳ Waiting for services to start..."
          sleep 20
          
          # Check service status
          docker compose ps
          
          # Verify services are running
          if ! docker compose ps loki | grep -q "Up"; then
            echo "::error::Loki is not running"
            docker compose logs loki
            exit 1
          fi
          
          if ! docker compose ps promtail | grep -q "Up"; then
            echo "::error::Promtail is not running"
            docker compose logs promtail
            exit 1
          fi
          
          if ! docker compose ps grafana | grep -q "Up"; then
            echo "::error::Grafana is not running"
            docker compose logs grafana
            exit 1
          fi
          
          if ! docker compose ps prometheus | grep -q "Up"; then
            echo "::error::Prometheus is not running"
            docker compose logs prometheus
            exit 1
          fi
          
          echo "✅ All monitoring services are running"

      - name: Test Grafana dashboards
        run: |
          # Wait for Grafana to be fully ready
          echo "⏳ Waiting for Grafana API..."
          for i in {1..30}; do
            if curl -f -s http://localhost:3000/api/health > /dev/null 2>&1; then
              echo "✓ Grafana is ready"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "::error::Grafana failed to become ready"
              docker compose logs grafana
              exit 1
            fi
            sleep 2
          done
          
          # Verify Grafana datasources
          echo "🔍 Verifying Grafana datasources..."
          
          # Check Prometheus datasource
          if curl -f -u admin:admin http://localhost:3000/api/datasources/uid/prometheus 2>/dev/null | grep -q "prometheus"; then
            echo "✓ Prometheus datasource configured"
          else
            echo "::warning::Prometheus datasource not found"
          fi
          
          # Check Loki datasource
          if curl -f -u admin:admin http://localhost:3000/api/datasources/uid/loki 2>/dev/null | grep -q "loki"; then
            echo "✓ Loki datasource configured"
          else
            echo "::warning::Loki datasource not found"
          fi
          
          # List dashboards
          echo "📊 Checking Grafana dashboards..."
          DASHBOARDS=$(curl -s -u admin:admin http://localhost:3000/api/search?type=dash-db)
          echo "$DASHBOARDS" | python3 -m json.tool || true
          
          # Verify our dashboards exist
          if echo "$DASHBOARDS" | grep -q "System Overview"; then
            echo "✓ System Overview dashboard found"
          else
            echo "::warning::System Overview dashboard not found"
          fi
          
          if echo "$DASHBOARDS" | grep -q "Logs & Events"; then
            echo "✓ Application Logs & Events dashboard found"
          else
            echo "::warning::Application Logs & Events dashboard not found"
          fi

      - name: Test log collection
        run: |
          # Generate test logs
          echo "📝 Generating test logs..."
          docker run --rm --name test-logger --log-driver=json-file \
            alpine sh -c 'echo "{\"timestamp\":\"2024-10-02T12:00:00Z\",\"level\":\"INFO\",\"message\":\"Test log entry\"}"' || true
          
          sleep 5
          
          # Verify Loki is receiving logs (basic check)
          echo "🔍 Testing Loki API..."
          if curl -f http://localhost:3100/ready 2>/dev/null; then
            echo "✓ Loki is ready to receive logs"
          else
            echo "::warning::Loki readiness check failed"
          fi
          
          # Query Loki for labels
          LABELS=$(curl -s http://localhost:3100/loki/api/v1/labels 2>/dev/null || echo '{"status":"error"}')
          if echo "$LABELS" | grep -q "status.*success"; then
            echo "✓ Loki API is responding"
          else
            echo "::warning::Loki API not fully functional"
          fi

      - name: Cleanup monitoring stack
        if: always()
        run: |
          echo "🧹 Cleaning up monitoring stack..."
          docker compose --profile monitoring down -v || true
          rm -f .env .env.test || true
          echo "✓ Cleanup completed"

