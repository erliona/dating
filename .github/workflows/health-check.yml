name: Health Check

on:
  schedule:
    # Run health checks every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
    # Allow manual trigger

concurrency:
  group: health-check
  cancel-in-progress: false

jobs:
  health-check:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.repository == 'erliona/dating'

    steps:
      - name: Check required secrets
        id: secrets
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_SSH_KEY: ${{ secrets.DEPLOY_SSH_KEY }}
        run: |
          if [ -z "$DEPLOY_HOST" ] || [ -z "$DEPLOY_USER" ] || [ -z "$DEPLOY_SSH_KEY" ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Skipping health check: deployment secrets not configured"
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up SSH key
        if: steps.secrets.outputs.skip != 'true'
        env:
          DEPLOY_SSH_KEY: ${{ secrets.DEPLOY_SSH_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$DEPLOY_SSH_KEY" > ~/.ssh/id_deploy
          chmod 600 ~/.ssh/id_deploy
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_deploy

      - name: Add server to known hosts
        if: steps.secrets.outputs.skip != 'true'
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
        run: |
          ssh-keyscan -H "$DEPLOY_HOST" >> ~/.ssh/known_hosts

      - name: Check service health
        if: steps.secrets.outputs.skip != 'true'
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        run: |
          echo "üîç Checking service health on $DEPLOY_HOST..."
          
          ssh -i ~/.ssh/id_deploy "${DEPLOY_USER}@${DEPLOY_HOST}" << 'EOF'
            cd /opt/dating-microservices || exit 1
            
            echo "Container status:"
            docker compose ps
            
            echo ""
            echo "Checking health endpoints..."
            FAILED_CHECKS=0
            
            for port in 8080 8081 8082 8083 8084 8085; do
              if curl -sf --max-time 5 http://localhost:$port/health > /dev/null 2>&1; then
                echo "‚úÖ Port $port: Healthy"
              else
                echo "‚ùå Port $port: Unhealthy or unreachable"
                FAILED_CHECKS=$((FAILED_CHECKS + 1))
              fi
            done
            
            echo ""
            echo "Checking service containers..."
            SERVICES="db auth-service profile-service discovery-service media-service chat-service api-gateway telegram-bot"
            STOPPED_SERVICES=0
            
            for service in $SERVICES; do
              if docker compose ps $service | grep -q "Up"; then
                echo "‚úÖ $service: Running"
              else
                echo "‚ùå $service: Stopped or missing"
                STOPPED_SERVICES=$((STOPPED_SERVICES + 1))
              fi
            done
            
            echo ""
            echo "Resource usage:"
            docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}" | head -10
            
            if [ $FAILED_CHECKS -gt 0 ] || [ $STOPPED_SERVICES -gt 0 ]; then
              echo ""
              echo "‚ö†Ô∏è Health check found issues:"
              echo "  - Failed health checks: $FAILED_CHECKS"
              echo "  - Stopped services: $STOPPED_SERVICES"
              exit 1
            fi
            
            echo ""
            echo "‚úÖ All services are healthy"
          EOF

      - name: Health check summary
        if: always() && steps.secrets.outputs.skip != 'true'
        run: |
          echo "## Health Check Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ $? -eq 0 ]; then
            echo "‚úÖ All services are healthy and running" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Health check detected issues" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please check the logs and service status." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Create issue on failure
        if: failure() && steps.secrets.outputs.skip != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üö® Health Check Failed',
              body: `Automated health check detected issues with the production deployment.
              
              **Workflow run:** ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}
              
              Please investigate and resolve the issues as soon as possible.`,
              labels: ['bug', 'monitoring', 'urgent']
            })
