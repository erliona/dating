name: Release

on:
  push:
    branches: [main]
    tags: [v*]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (patch/minor/major)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Git
        run: |
          git config --global user.name "Release Bot"
          git config --global user.email "bot@dating.serge.cc"
      
      - name: Install Git Cliff
        run: |
          wget https://github.com/orhun/git-cliff/releases/download/v1.4.0/git-cliff-1.4.0-x86_64-unknown-linux-gnu.tar.gz
          tar -xzf git-cliff-1.4.0-x86_64-unknown-linux-gnu.tar.gz
          sudo mv git-cliff /usr/local/bin/
      
      - name: Generate Changelog
        run: |
          git cliff --output CHANGELOG.md
          git add CHANGELOG.md
          git commit -m "chore: update changelog" || exit 0
      
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    strategy:
      matrix:
        service: [
          'api-gateway',
          'auth-service', 
          'profile-service',
          'discovery-service',
          'media-service',
          'chat-service',
          'admin-service',
          'telegram-bot',
          'webapp'
        ]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/erliona/dating/${{ matrix.service }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: services/${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Deploy to Staging
        run: |
          echo "Deploying ${{ github.ref_name }} to staging environment"
          # Add staging deployment logic here
          # ssh to staging server
          # docker compose pull
          # docker compose up -d

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [release, build-and-push]
    if: always()
    
    steps:
      - name: Notify Success
        if: needs.release.result == 'success' && needs.build-and-push.result == 'success'
        run: |
          echo "‚úÖ Release ${{ github.ref_name }} created successfully"
          echo "üì¶ Docker images built and pushed to ghcr.io/erliona/dating"
          echo "üöÄ Staging deployment initiated"
      
      - name: Notify Failure
        if: needs.release.result == 'failure' || needs.build-and-push.result == 'failure'
        run: |
          echo "‚ùå Release ${{ github.ref_name }} failed"
          echo "Check the logs for details"
