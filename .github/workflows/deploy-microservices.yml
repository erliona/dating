name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
  push:
    branches:
      - main
    paths:
      - 'services/**'
      - 'gateway/**'
      - 'core/**'
      - 'adapters/**'
      - 'bot/**'
      - 'docker-compose.yml'
      - '.github/workflows/deploy-microservices.yml'

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Run tests before deployment
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: dating_test
          POSTGRES_USER: dating
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run tests
        env:
          DATABASE_URL: postgresql+asyncpg://dating:test_password@localhost:5432/dating_test
          BOT_TOKEN: test:token
          JWT_SECRET: test-secret-key-for-testing-32chars
        run: |
          python -m pytest tests/ -v --tb=short

  # Validate Docker builds
  build:
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Validate docker-compose
        run: |
          docker compose config > /dev/null
          echo "✅ docker-compose.yml is valid"

      - name: Build images
        run: |
          docker compose build --no-cache

  # Deploy to server
  deploy:
    runs-on: ubuntu-latest
    needs: [test, build]
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check required secrets
        id: secrets
        shell: bash
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_SSH_KEY: ${{ secrets.DEPLOY_SSH_KEY }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        run: |
          set -euo pipefail

          missing=()
          for var in DEPLOY_HOST DEPLOY_USER DEPLOY_SSH_KEY BOT_TOKEN JWT_SECRET; do
            if [ -z "${!var:-}" ]; then
              missing+=("$var")
            fi
          done

          if [ "${#missing[@]}" -ne 0 ]; then
            printf '::warning::Skipping deploy because required secrets are missing: %s\n' "${missing[*]}"
            echo "missing=true" >> "$GITHUB_OUTPUT"
          else
            echo "missing=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Abort deployment (secrets missing)
        if: steps.secrets.outputs.missing == 'true'
        run: |
          echo "❌ Deployment skipped because required secrets are not configured."
          echo ""
          echo "Required secrets for microservices deployment:"
          echo "  - DEPLOY_HOST    : IP or hostname of your server"
          echo "  - DEPLOY_USER    : SSH user with sudo permissions"
          echo "  - DEPLOY_SSH_KEY : Private SSH key for authentication"
          echo "  - BOT_TOKEN      : Telegram bot token from @BotFather"
          echo "  - JWT_SECRET     : Secret key for JWT token signing"
          echo ""
          echo "Optional secrets for HTTPS:"
          echo "  - DOMAIN         : Your domain name (e.g., example.com)"
          echo "  - ACME_EMAIL     : Email for Let's Encrypt notifications"
          echo ""
          echo "Configure these in: Settings → Secrets and variables → Actions"
          exit 1

      - name: Set up SSH key
        if: steps.secrets.outputs.missing != 'true'
        shell: bash
        env:
          DEPLOY_SSH_KEY: ${{ secrets.DEPLOY_SSH_KEY }}
        run: |
          set -euo pipefail

          mkdir -p ~/.ssh
          key="$DEPLOY_SSH_KEY"

          if [[ "$key" == *"-----BEGIN"* ]]; then
            decoded="$key"
          else
            if ! decoded="$(printf '%s' "$key" | base64 --decode)"; then
              echo "::error::DEPLOY_SSH_KEY must be a valid PEM block or a base64-encoded PEM" >&2
              exit 1
            fi
          fi

          if [[ "$decoded" != *"-----BEGIN"* ]]; then
            echo "::error::DEPLOY_SSH_KEY does not look like a PEM-formatted key" >&2
            exit 1
          fi

          cleaned="$(printf '%s' "$decoded" | tr -d '\r')"
          if [[ "$cleaned" == *$'\n' ]]; then
            printf '%s' "$cleaned" > ~/.ssh/id_deploy
          else
            printf '%s\n' "$cleaned" > ~/.ssh/id_deploy
          fi

          chmod 600 ~/.ssh/id_deploy
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_deploy

      - name: Add server to known hosts
        if: steps.secrets.outputs.missing != 'true'
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
        run: |
          ssh-keyscan -H "$DEPLOY_HOST" >> ~/.ssh/known_hosts

      - name: Deploy to server
        if: steps.secrets.outputs.missing != 'true'
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          DOMAIN: ${{ secrets.DOMAIN }}
          ACME_EMAIL: ${{ secrets.ACME_EMAIL }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        run: |
          set -euo pipefail

          echo "🚀 Deploying microservices to $DEPLOY_HOST..."

          # Deploy directory on server
          DEPLOY_DIR="/opt/dating-microservices"

          # Create tarball of repository (excluding .git and build artifacts)
          echo "📦 Creating deployment archive..."
          tar czf /tmp/deploy.tar.gz \
            --exclude='.git' \
            --exclude='__pycache__' \
            --exclude='*.pyc' \
            --exclude='.pytest_cache' \
            --exclude='node_modules' \
            --exclude='.env' \
            -C "$GITHUB_WORKSPACE" .

          # Create deployment script
          cat > /tmp/deploy.sh << 'EOFSCRIPT'
          #!/bin/bash
          set -euo pipefail

          DEPLOY_DIR="/opt/dating-microservices"
          
          echo "📦 Setting up deployment directory..."
          sudo mkdir -p "$DEPLOY_DIR"
          sudo chown -R $(whoami):$(whoami) "$DEPLOY_DIR"
          
          echo "📥 Extracting application files..."
          cd "$DEPLOY_DIR"
          tar xzf /tmp/deploy.tar.gz

          echo "🔧 Configuring environment..."
          cat > .env << EOF
          BOT_TOKEN=${BOT_TOKEN}
          JWT_SECRET=${JWT_SECRET}
          POSTGRES_DB=dating
          POSTGRES_USER=dating
          POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-$(openssl rand -base64 24)}
          DOMAIN=${DOMAIN:-localhost}
          ACME_EMAIL=${ACME_EMAIL:-admin@example.com}
          WEBAPP_URL=https://${DOMAIN:-localhost}
          EOF

          echo "🐳 Installing Docker if needed..."
          if ! command -v docker &> /dev/null; then
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo usermod -aG docker $(whoami)
          fi

          echo "🛑 Stopping existing services and cleaning up..."
          
          # Step 1: Gracefully stop containers with longer timeout
          echo "  🛑 Stopping running containers (30s timeout)..."
          docker compose stop -t 30 || true
          
          # Step 2: Remove all containers, networks, and volumes
          echo "  🗑️  Removing containers and resources..."
          docker compose down --remove-orphans --volumes || true
          
          # Step 3: Force remove any containers that might still exist
          docker compose rm -f || true
          
          # Step 4: Remove any remaining containers from this project (by name pattern)
          echo "  🧹 Cleaning up any stray containers..."
          docker ps -aq --filter "name=dating-microservices" | xargs -r docker rm -f || true
          
          # Step 5: Clean up unused networks to prevent conflicts
          echo "  🔌 Cleaning up networks..."
          docker network prune -f || true
          
          # Step 6: Wait for system to stabilize
          echo "  ⏳ Waiting for system to stabilize (15 seconds)..."
          sleep 15
          
          # Step 7: Verify no containers are running
          echo "  🔍 Verifying cleanup..."
          REMAINING=$(docker ps -q --filter "name=dating-microservices" | wc -l)
          if [ "$REMAINING" -gt 0 ]; then
            echo "  ⚠️  Found $REMAINING running containers after cleanup, force stopping..."
            docker ps -q --filter "name=dating-microservices" | xargs -r docker stop -t 10 || true
            docker ps -aq --filter "name=dating-microservices" | xargs -r docker rm -f || true
            echo "  ⏳ Additional wait after force stop (10 seconds)..."
            sleep 10
          fi
          
          # Step 7.5: Kill any lingering docker-proxy processes from this project
          echo "  🔪 Killing any lingering docker-proxy processes..."
          # Find all docker-proxy processes related to our ports and kill them
          for port in 8080 8081 8082 8083 8084 8085 8086; do
            PROXY_PIDS=$(ps aux | grep "docker-proxy" | grep ":$port" | grep -v grep | awk '{print $2}' || echo "")
            if [ -n "$PROXY_PIDS" ]; then
              echo "    Found docker-proxy processes for port $port: $PROXY_PIDS"
              for PID in $PROXY_PIDS; do
                echo "    Killing docker-proxy process $PID..."
                sudo kill -9 $PID 2>/dev/null || true
              done
            fi
          done
          # Give Docker time to clean up after killing proxies
          echo "  ⏳ Waiting for Docker to clean up after killing proxies (10 seconds)..."
          sleep 10
          
          # Step 8: Verify critical ports are available
          echo "  🔍 Checking if critical ports are available..."
          PORTS_TO_CHECK="8080 8081 8082 8083 8084 8085 8086"
          MAX_WAIT=45
          
          for port in $PORTS_TO_CHECK; do
            WAIT_TIME=0
            while ss -tuln | grep -q ":$port "; do
              if [ $WAIT_TIME -ge $MAX_WAIT ]; then
                echo "    ❌ Port $port still in use after ${MAX_WAIT}s"
                echo "    Attempting to identify and kill ALL processes using port..."
                ss -tulnp | grep ":$port " || true
                # Try to kill ALL processes using the port (last resort)
                # This gets all PIDs for both IPv4 and IPv6
                PIDS=$(ss -tulnp | grep ":$port " | grep -oP 'pid=\K[0-9]+' | sort -u || echo "")
                if [ -n "$PIDS" ]; then
                  for PID in $PIDS; do
                    echo "    Killing process $PID using port $port..."
                    sudo kill -9 $PID 2>/dev/null || true
                  done
                  sleep 5  # Wait longer after killing processes
                fi
                break
              fi
              if [ $WAIT_TIME -eq 0 ]; then
                echo "    ⏳ Port $port in use, waiting for release..."
              fi
              sleep 3
              WAIT_TIME=$((WAIT_TIME + 3))
            done
            if ! ss -tuln | grep -q ":$port "; then
              echo "    ✅ Port $port is available"
            else
              echo "    ⚠️  Port $port may still be in use"
            fi
          done
          
          # Step 9: Final verification before proceeding
          echo "  🔍 Final port verification before deployment..."
          BLOCKED_PORTS=""
          for port in $PORTS_TO_CHECK; do
            if ss -tuln | grep -q ":$port "; then
              BLOCKED_PORTS="$BLOCKED_PORTS $port"
            fi
          done
          
          if [ -n "$BLOCKED_PORTS" ]; then
            echo "  ❌ CRITICAL: The following ports are still in use after all cleanup attempts:$BLOCKED_PORTS"
            echo "  Showing processes using these ports:"
            ss -tulnp | grep -E ":(8080|8081|8082|8083|8084|8085|8086) " || true
            echo ""
            echo "  This indicates a serious issue with port cleanup."
            echo "  Deployment cannot proceed with blocked ports."
            echo ""
            echo "  Please investigate the following:"
            echo "    1. Are there other services using these ports?"
            echo "    2. Are there manual Docker containers running?"
            echo "    3. Is there a Docker daemon issue?"
            echo ""
            exit 1
          else
            echo "  ✅ All critical ports are free"
          fi
          
          echo "  ✓ Cleanup complete"

          echo "🏗️  Building microservices..."
          docker compose build

          echo "🚀 Deploying microservices..."
          docker compose up -d

          echo "⏳ Waiting for services to be healthy..."
          sleep 15

          echo "✅ Verifying deployment..."
          SERVICES="auth-service profile-service discovery-service media-service chat-service api-gateway telegram-bot"
          for service in $SERVICES; do
            if docker compose ps $service | grep -q "Up"; then
              echo "  ✓ $service is running"
            else
              echo "  ✗ $service failed to start"
              docker compose logs --tail=50 $service
            fi
          done

          echo "🔍 Checking health endpoints..."
          for port in 8080 8081 8082 8083 8084 8085; do
            if curl -s -f http://localhost:$port/health > /dev/null; then
              echo "  ✓ Port $port health check passed"
            else
              echo "  ✗ Port $port health check failed"
            fi
          done

          echo "📊 Service status:"
          docker compose ps
          
          echo ""
          echo "✅ Deployment complete!"
          echo ""
          echo "Service URLs:"
          echo "  API Gateway:   http://localhost:8080"
          echo "  Auth Service:  http://localhost:8081"
          echo "  Profile:       http://localhost:8082"
          echo "  Discovery:     http://localhost:8083"
          echo "  Media:         http://localhost:8084"
          echo "  Chat:          http://localhost:8085"
          EOFSCRIPT

          chmod +x /tmp/deploy.sh

          # Copy deployment archive and script to server
          echo "📤 Copying files to server..."
          scp -i ~/.ssh/id_deploy /tmp/deploy.tar.gz "${DEPLOY_USER}@${DEPLOY_HOST}:/tmp/deploy.tar.gz"
          scp -i ~/.ssh/id_deploy /tmp/deploy.sh "${DEPLOY_USER}@${DEPLOY_HOST}:/tmp/deploy.sh"
          
          echo "🚀 Executing deployment on server..."
          ssh -i ~/.ssh/id_deploy "${DEPLOY_USER}@${DEPLOY_HOST}" \
            "BOT_TOKEN='$BOT_TOKEN' \
             JWT_SECRET='$JWT_SECRET' \
             DOMAIN='$DOMAIN' \
             ACME_EMAIL='$ACME_EMAIL' \
             POSTGRES_PASSWORD='$POSTGRES_PASSWORD' \
             bash /tmp/deploy.sh"

      - name: Verify deployment health
        if: steps.secrets.outputs.missing != 'true'
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        run: |
          echo "🔍 Verifying deployment health..."
          
          # Wait for services to stabilize
          sleep 20
          
          # Check service health
          ssh -i ~/.ssh/id_deploy "${DEPLOY_USER}@${DEPLOY_HOST}" << 'EOF'
            cd /opt/dating-microservices
            
            echo "Checking container status..."
            docker compose ps
            
            echo ""
            echo "Checking health endpoints..."
            for port in 8080 8081 8082 8083 8084 8085; do
              if curl -sf http://localhost:$port/health > /dev/null 2>&1; then
                echo "✅ Port $port health check passed"
              else
                echo "⚠️  Port $port health check failed (may not have health endpoint)"
              fi
            done
            
            echo ""
            echo "Checking if all required services are running..."
            REQUIRED_SERVICES="auth-service profile-service discovery-service media-service chat-service api-gateway telegram-bot db"
            FAILED=0
            
            for service in $REQUIRED_SERVICES; do
              if docker compose ps $service | grep -q "Up"; then
                echo "✅ $service is running"
              else
                echo "❌ $service is NOT running"
                FAILED=$((FAILED + 1))
              fi
            done
            
            if [ $FAILED -gt 0 ]; then
              echo ""
              echo "❌ $FAILED service(s) failed to start"
              exit 1
            fi
          EOF

      - name: Deployment summary
        if: steps.secrets.outputs.missing != 'true'
        run: |
          echo "## 🚀 Deployment Completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Services deployed:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ API Gateway (Port 8080)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Auth Service (Port 8081)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Profile Service (Port 8082)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Discovery Service (Port 8083)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Media Service (Port 8084)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Chat Service (Port 8085)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Telegram Bot" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Monitor service logs: \`docker compose logs -f\`" >> $GITHUB_STEP_SUMMARY
          echo "2. Check monitoring dashboards (if configured)" >> $GITHUB_STEP_SUMMARY
          echo "3. Verify application functionality" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Microservices deployment completed successfully!"
